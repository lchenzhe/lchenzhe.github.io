<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python学习第一周]]></title>
    <url>%2F2018%2F10%2F20%2Fpython%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%91%A8%2F</url>
    <content type="text"><![CDATA[Python安装windows1234561、下载安装包 https://www.python.org/downloads/2、安装 默认安装路径：C:\python353、配置环境变量 【右键计算机】--&gt; 【属性】--&gt; 【高级系统设置】--&gt; 【高级】--&gt; 【环境变量】--&gt; 【在第二个内容框中找到 变量名为Path 的一行，双击】 --&gt; 【Python安装目录追加到变值值中，用 ;分割】（python文件路径;script文件路径;） Linux/Mac1无需安装，原装Python环境 Hello world程序1print("Hello world!") 变量1234567891011121314151617#-*- coding:utf -8-*-name = "Jchen"上述代码声明了一个变量，变量名为:name，变量name的值为："Jchen"变量定义的规则：①变量名只能是 字母、数字或下划线的任意组合②变量名的第一个字符不能是数字③系统关键字不能声明为变量名变量的赋值：#!/usr/bin/env python# -*- coding: utf-8 -*-name = " Jchen "name2 = nameprint("my name is",name,name2)name = " lailiao "print("my name is",name,name2) 用户输入1234import getpass #密码模块username = input("username:")password = getpass.getpass("password") #getpass.getpass为将密码加密print(username,password) 模块初识12345678910111213import sysprint(sys.path) #打印环境变量列表print(sys.argv) #把执行脚本时传递的参数获取到了import oscmd_res = os.system("dir") #执行命令，不保存结果cmd_res = os.popen("dir").read() #执行命令并保存，读取print("--&gt;",cmd_res) #0表示成功os.mkdir("nem_dir") #创建新目录python全局环境变量目录，基本一般都放在一个叫 Python/3.5/site-packages 目录下 数据类型初识1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071721、数字整型int — —&gt;长整型 longprint（type（2））浮点型floatprint（type(2.3)）复数complex（了解）2、布尔值 bull真或假 1或03、字符串 strprint（type（"hello world"））#字符串常用功能：移除空白、分割、长度、索引、切片#字符串格式化输出#play1name = input("name;")age = int(input("age:")) #integer 整形job = input("job:")salary = input("salary:")#格式化输出info = '''--------- info of %s ------------name:%sage:%djob:%ssalary:%s------------------------------------- '''%(name,name,age,job,salary)print(info)#格式化字符串%s为字符串，%d为数字，%f为小数#play2 利用关键字参数输出info2 = '''--------- info of &#123;_name&#125; ------------name:&#123;_name&#125;age:&#123;_age&#125;job:&#123;_job&#125;salary:&#123;_salary&#125;------------------------------------- '''.format(_name=name, _age=age, _job=job, _salary=salary)print(info2)#play3 利用位置参数输出info3 = '''--------- info of &#123;0&#125; ------------name:&#123;0&#125;age:&#123;1&#125;job:&#123;2&#125;salary:&#123;3&#125;------------------------------------- '''.format(name,age,job,salary)4、列表 list创建列表：name_list = ['alex', 'seven', 'eric']name_list ＝ list(['alex', 'seven', 'eric'])基本操作：索引、切片、追加、删除、长度、切片、循环、包含5、元祖 tuple(不可变列表)创建元祖：ages = (11,22,33,44,55)ages = tuple(11,22,33,44,55)6、字典 dict（无序）创建字典：person = &#123;"name": "mr.wu", 'age': 18&#125;person = dict(&#123;"name": "mr.wu", 'age': 18&#125;)常用操作：索引、新增、删除、键、值、键值对、循环、长度 数据运算More info: 数据运算 if…else表达式1234567891011121314151617#game1 用户登陆验证username = input("username:")password = input("password:")if username == "Jchen" and password == "cmd": print("Welcome user &#123;name&#125; login...".format(name=username))else: print("Invalid username or password!")#game2 猜年龄游戏age_of_oldbooy = 56guess_age = int(input("guess age:")) if guess_age == age_of_oldbooy: print("yes,you got it.") break elif guess_age &gt; age_of_oldbooy: print("think smaller..") else: print("think bigger!") for循环12345678910111213141516171819202122232425262728# 最简单的循环10次for i in range(0,10,1): #其中1为步长，默认为1 print("loop ",i)输出：loop 0loop 1loop 2loop 3loop 4loop 5loop 6loop 7loop 8loop 9#需求一：还是上面的程序，但是遇到大于5的循环次数就不走了，直接跳入下一次循环for i in range(10): if i &lt;5: print("loop ",i) else: continue #结束本轮循环，开始下一轮循环 print("hehe...")#需求二：还是上面的程序，但是遇到大于5的循环次数就不走了，直接退出for i in range(10): print('-------------',i) for j in range(10): print(j) if j &gt;5: break #结束循环 while循环1234567count = 0while True: print("count:",count) count = count +1 #count +=1 if count == 1000: break#game2 猜年龄游戏进化 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#如何实现让用户不断的猜年龄，但只给最多3次机会，再猜不对就退出程序。#play1age_of_oldbooy = 56count = 0while count &lt; 3: guess_age = int(input("guess age:")) if guess_age == age_of_oldbooy: print("yes,you got it.") break elif guess_age &gt; age_of_oldbooy: print("think smaller..") else: print("think bigger!") count +=1else: print("你的次数用完了！拜拜。")#play2age_of_oldbooy = 56for i in range(3): guess_age = int(input("guess age:")) if guess_age == age_of_oldbooy: print("yes,you got it.") break elif guess_age &gt; age_of_oldbooy: print("think smaller..") else: print("think bigger!")else: print("你的次数用完了！拜拜。")print("不玩了！")play3age_of_oldbooy = 56count = 0while count &lt; 3: guess_age = int(input("guess age:")) if guess_age == age_of_oldbooy: print("yes,you got it.") print("game over") break elif guess_age &gt; age_of_oldbooy: print("think smaller..") else: print("think bigger!") count +=1 if count == 3: continue_confirm = input("do you want to keep guessing...?\nyes:enter no:n") if continue_confirm != 'n': count = 0 print("game over") homework123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# 编写登陆接口,输入用户名密码,认证成功后显示欢迎信息,输错三次后锁定user = "jchen"passwd = "123456"i = 0l = open('F:\\untitled\\oldboy\\week1\\list.txt','r+')while i&lt;3: username = input("请输入用户名：") password = input("请输入密码：") if username == user and password == passwd: print("认证成功！欢迎%s登录"%username) break elif username in list(l): print("你的账户已被锁定！") break else: print("账户名密码错误，请重新输入！") i +=1 if i ==3: l.write(username) break#多级菜单,三级菜单,可依次选择进入各子菜单data = &#123; '北京':&#123; "昌平":&#123; "沙河":["oldboy","test"], "天通苑":["链家地产","我爱我家"] &#125;, "朝阳":&#123; "望京":["奔驰","陌陌"], "国贸":&#123;"CICC","HP"&#125;, "东直门":&#123;"Advent","飞信"&#125;, &#125;, "海淀":&#123;&#125;, &#125;, '山东':&#123; "德州":&#123;&#125;, "青岛":&#123;&#125;, "济南":&#123;&#125; &#125;, '广东':&#123; "东莞":&#123;&#125;, "常熟":&#123;&#125;, "佛山":&#123;&#125;, &#125;,&#125;exit_flag = Falsewhile not exit_flag: for i in data: print(i) choice1 = input("请输入你的选择1：") if choice1 == 'q': exit_flag = True elif choice1 in data: while not exit_flag: for j in data[choice1]: print('\t',j) choice2 = input("请输入你的选择2：") if choice2 in data[choice1]: while not exit_flag: for k in data[choice1][choice2]: print('\t\t',k) choice3 = input("请输入你的选择3：") if choice3 in data[choice1][choice2]: for m in data[choice1][choice2][choice3]: print('\t\t\t',m) choice4 = input("最后一层，按b返回，按q退出！") if choice4 == 'b': pass elif choice4 == 'q': exit_flag = True elif choice3 == 'b': break elif choice3 == 'q': exit_flag = True elif choice2 =='b': break elif choice2 == 'q': exit_flag = True 知识补充12345678910111213141516171819202122#bytes类型msg = '我爱北京天安门'print(msg)print(msg.encode(encoding="utf-8")) #二进制转换,默认为utf-8, 编码print(type(msg.encode(encoding="utf-8"))) #bytes为二进制类型 转码print(msg.encode(encoding="utf-8").decode(encoding="utf-8")) #二进制转文本print(type(msg.encode(encoding="utf-8").decode(encoding="utf-8"))) #字符串类型#三元运算a = 1b = 3c = 5result = a if a &gt; c else b#如果if条件为真：result = a else result = b#进制二进制:01八进制:01234567十进制:0123456789十六进制:0123456789ABCDEF 二进制到16进制转换:http://jingyan.baidu.com/album/47a29f24292608c0142399cb.html?picindex=1]]></content>
  </entry>
  <entry>
    <title><![CDATA[python学习第二周]]></title>
    <url>%2F2018%2F09%2F01%2Fpython%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%91%A8%2F</url>
    <content type="text"></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>oldboy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python购物车]]></title>
    <url>%2F2018%2F08%2F29%2Fpython%E8%B4%AD%E7%89%A9%E8%BD%A6%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980# Author:Jchen程序：购物车程序需求:启动程序后，让用户输入工资，然后打印商品列表允许用户根据商品编号购买商品用户选择商品后，检测余额是否够，够就直接扣款，不够就提醒可随时退出，退出时，打印已购买商品和余额#alex老师的#商品列表product_list =[ ('iphone',5800), ('Mac Pro',9800), ('bike',800), ('watch',10600), ('coffee',31), ('Alex-python',120)]#购物列表shopping_list= []#输入工资salary = input("Input your salary:")if salary.isdigit(): #判断是否为数字 salary = int(salary) #死循环 while True: #打印商品编号及商品 for index,item in enumerate(product_list): #把列表的下标取出来 # print(product_list.index(item),item) print(index,item) user_choice = input("选择要买啥？，按q退出购买。&gt;&gt;&gt;：") if user_choice.isdigit(): user_choice = int(user_choice) #判断商品编号是否正确 if user_choice &lt; len(product_list) and user_choice &gt;=0: p_item = product_list[user_choice] if p_item[1] &lt;= salary: #买得起 shopping_list.append(p_item) #购物车内添加商品 salary -= p_item[1] #扣钱 print("Added %s into shoppingcart,your current balance is \033[31;1m%s\033[0m"%(p_item,salary)) #此处存在高亮 031为字体红色 固定写法\033[颜色编号;1m \033[0m else: #买不起 print("\033[41;1m你的余额只剩[%s]啦，还买个毛线啊！\033[0m"%salary) ##此处存在高亮 041为底纹红色 else: #编号超出 print("product code [%s] is not exist"%user_choice) elif user_choice == 'q': #退出购物并打印购物列表 print('------shopping list----------') for p in shopping_list: print(p) print("your current balance:",salary) exit() else: #其他非正确购物编号 print("invalid option")else: #工资输入错误 print("请输入数字！")# 我自己写的commodity = [["computer",5000],["coffee",30],["book",100],["bicycle",1000]]shopping_cart = [ ]salary = int(input("please enter you salary:"))if salary &gt;0: print(commodity) q = 1 while q == 1: res = int(input("please choose commodity you like:")) if commodity[res][1] &lt;salary: shopping_cart.append(commodity[res]) salary -=commodity[res][1] print("Congratulations on your purchase success!\nyour current balance is %s"%salary) q = int(input('是否继续？\n1/继续，0/退出')) else: print("Your balance is insufficient!") q = int(input('是否继续？\n1/继续，0/退出')) if shopping_cart == [] and q ==0: print("You didn't buy anything!") break print("This is your shopping cart:",shopping_cart)]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>oldboy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web自动化测试]]></title>
    <url>%2F2018%2F07%2F13%2Fselenium-test%2F</url>
    <content type="text"><![CDATA[web自动化测试原则：12345678910111213141、设计原则汇总 a、将web软件的每一个页面（功能）封装为一个类（登录类、产品类。。。） b、封装的时候主要考虑： 操作 + 验证(包含成功和不成功两种情况) c、公用的功能使用函数或类实现（数据库操作类，发邮件函数类，写报告类。。。） d、自动化测试所有代码用 Try包起来，保证一个用例的失败不会影响其他用例 e、数据驱动：自动化测试用例需要单独在Excel/csv或数据库中书写， 实现用例数据和测试业务逻辑的分离，相当于是用例数据驱动自动化运行 设计一个调度程序（单元测试框架中）逐行读取Excel中的数据，通过调用功能页面类中的功能完成Excel表中用例的执行，并回写执行结果 在调度程序中对界面验证以及数据库同时进行验证 f、借用Python的单元测试框架来构造测试用例 1、unittest包中包含三个类：TestCase/TestSuite/Text(HTML)TestRunner 2、testSuite中加入testCase 3、用TestRunner运行testSuite g、使用单元测试框总体执行并生成测试报告 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657具体测试流程：1、功能类 a、登录类(Login)： 属性：self.url self.dr 方法： __init__(self, url) open close login（self, user,pwd） login_v(self, status, expInfo) if __name__ == "__main__" b、产品类(Product)： 属性：self.lg=Login("url") 方法：添加：p_add()、删除：p_del、修改：p_mod、查询：p_find、 添加验证：p_add_v、删除验证：p_del_v........ 自动化测试添加产品: p_add(self,case) p_add_v(self,case) if __name__ == "__main__"2、测试类（借用python的单元测试框架来实现,unittest） a、登录测试类 setUp:实例化成员变量 self.lg = Login("url") tearDown: 测试结束后的操作 test_login_batch:测试批量执行Excel中的用例 1、打开cases.xlsx 2、另存为cases_res.xlsx，并关闭cases.xlsx 3、打开cases_res.xlsx 4、读取其中的login页面数据 (Excel相当于一个元祖（tuple）)) 5、循环login页面数据 6、第一行跳过，最后一行则中断循环 7、执行前置SQL语句，删除要添加的用户，并判断是否执行成功 8、将一行excel数据变成一个字符串的列表 9、调用Login类中的方法执行用例，并执行验证SQL 10、判断返回的rc与dbrc，以确定用例是否成功 11、将PASS/Fail信息 写入Excel中指定的位置 12、循环执行下一行用例 13、循环完后断言失败用例数是否等于0 b、产品测试类 setUp:实例化成员变量 self.pd = Product("url") self.db = CommonDB(host,port,db,user,pwd,charset) tearDown: 测试结束后的操作 test_product_batch:测试批量执行Excel中的用例（读取Excel文件的相同操作同登录类） 1、界面验证 2、前置SQL 3、验证SQL 4、界面+数据库验证都要成功才算PASS 5、循环完后断言失败用例数是否等于03、公共模块（函数或类） funcs.py : 公共函数库 commDB.py : 公共数据库操作类 html_test_runner.py : 测试运行器，会生成测试报告 mail.py : 发邮件4、testRunner 1、unittest包中包含三个类：TestCase/TestSuite/Text(HTML)TestRunner 2、testSuite中加入testCase 3、用TestRunner运行testSuite]]></content>
      <categories>
        <category>selenium</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>Auto_testing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬取淘宝信息]]></title>
    <url>%2F2018%2F06%2F10%2F%E7%88%AC%E5%8F%96%E6%B7%98%E5%AE%9D%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738394041424344#！/usr/bin/env python3import requestsimport reimport jsonquery = input('请输入需要的关键词&gt;&gt;&gt;：').strip()url='https://s.taobao.com/search?q=&#123;&#125;&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.1&amp;ie=utf8&amp;initiative_id=tbindexz_20170306'.format(query)headers=&#123; 'user-agent': ' Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36'&#125;# 发送http请求response = requests.get(url)html = response.text # 获取了数据#提取我们需要的数据 通过正则表达式( 多用 )content = re.findall(r'g_page_config =(.*?)g_srp_loadCss',html,re.S) [0] # 正则表达式 g_page_config 开始 中间有=(.*?) g_srp_loadCss结尾# 数据格式化 json 数据content = content.strip(' \n;') # 去掉多余的字符print(content)content = json.loads(content) # 把json格式的字符串 转换成字典#数据结构的嵌套data = content['mods']['itemlist']['data']['auctions'] # 取出每一个商品#循环取出每一条数据#需要什么数据？# 标题，标价，购买人数，是否包邮，是否天猫，地区，店名，url#写csv格式 文本格式f = open('搜索&#123;&#125;的结果.CSV'.format(query),'w',encoding='utf-8')#写标题f.write('标题,标价,购买人数,是否包邮,是否天猫,地区,店名,url\n')for item in data: temp = &#123; 'title':item['title'], 'view_price':item['view_price'], 'view_sales': item['view_sales'], 'view_fee': '否' if float(item['view_fee']) else '是', 'isTmall': '是' if item['shopcard']['isTmall'] else '否', 'area':item['item_loc'], 'name':item['nick'], 'detal_url':item['detail_url'] &#125; f.write('&#123;title&#125;,&#123;view_price&#125;,&#123;view_sales&#125;,&#123;view_fee&#125;,&#123;isTmall&#125;,&#123;area&#125;,&#123;name&#125;,&#123;detal_url&#125;\n'.format( ** temp))f.close()]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
